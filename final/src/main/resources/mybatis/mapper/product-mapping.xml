<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="product.ProductDAO">
  	<resultMap type="java.util.HashMap" id="tagnames">
  		<id column="detail_num" property="detail_num"/>
  		<id column="detail_name" property="detail_name"/>
  	</resultMap>
  	<parameterMap type="java.util.HashMap" id="getforsale">
  		<parameter property="idol_name"/>
  		<parameter property="detail_name"/>
  	</parameterMap>
  	<resultMap type="java.util.HashMap" id="getproducts">
  		<id column="product_num" property="product_num"/>
  		<id column="product_title" property="product_title"/>
  		<id column="idol_num" property="idol_num"/>
  		<id column="category_num" property="category_num"/>
  		<id column="product_contents" property="product_contents"/>
  		<id column="product_price" property="product_price"/>
  		<id column="buyer_check" property="buyer_check"/>
  		<id column="product_time" property="product_time"/>
  		<id column="pay_time" property="pay_time"/>
  		<id column="billing_number" property="billing_number"/>
  		<id column="pay_price" property="pay_price"/>
  		<id column="image_path" property="image_path"/>
  	</resultMap>
  	
  	<select id="getpdtDetailTags" parameterType="String" resultType="product.ProductDetailDTO">
  		select * from product_detail where detail_name like #{keyword}
  	</select>
  	<insert id="insertSales" parameterType="productdto">
  		insert into product_info 
  		(product_title, idol_num, user_num, category_num,product_contents, product_time, safe_trade, auction_check, product_status1,
  		product_status2, product_status3, product_status4, product_status5, detail_num, product_price) 
  		values (#{product_title}, #{idol_num}, #{user_num}, #{category_num},#{product_contents}, now(), #{safe_trade}, #{auction_check}, #{product_status1},
  		#{product_status2}, #{product_status3}, #{product_status4}, #{product_status5}, #{detail_num}, #{product_price})
  	</insert>
	<select id="getLastInsertNum" resultType="int">
		select product_num from product_info order by product_num desc limit 0,1
	</select>  	
	<select id="getforSale" parameterMap="getforsale" resultType="String">
		select distinct(detail_name) from product_info pi join product_detail pd on pi.detail_num=pd.detail_num 
		join product_category pc on pi.category_num=pc.category_num join idol_category ic 
		on pi.idol_num=ic.idol_num where pc.category_name= #{category_name} and ic.idol_name=#{idol_name}
	</select>
	<!-- 카테고리 별 보기 -->
  	<select id="getProducts" parameterType="productdto" resultType="productdto">
	  	select * from (select pi.product_num,product_title,idol_num,category_num,user_num,product_price,product_time,safe_trade,auction_check,
		product_status1,product_status2,product_status3,product_status4,product_status5,product_sell,detail_num,image_path, rank() over (partition by i.product_num order by image_path desc) as rnk 
		from product_info pi left join image i on pi.product_num=i.product_num) as rankrow where rankrow.rnk=1 and idol_num=#{idol_num} and category_num = #{category_num} order by product_time desc; 
	</select>
	<!-- 찜하기 -->
	<insert id="likeProduct" parameterType="productdto">
		insert into like_info (product_num, user_num)values (#{product_num}, #{user_num})
	</insert>
	<!-- 찜취소 -->
	<delete id="unlikeProduct" parameterType="productdto">
		delete from like_info where product_num = #{product_num} and user_num =  #{user_num};
	</delete>
	<!-- 찜한목록 가져오기 -->
	<select id="getLikeProduct" parameterType="int" resultType="int">
		select product_num from like_info where user_num=#{user_num}
	</select>
  </mapper>